<section ID="chapter.widgets.numberentry">
  <TITLE>Numberentry widget</title>
<p>
<picture.extern to="numberentry.gif" type=gif>

<<<local
   N R
   Desc=numberentry(min:0 max:100
                    init:10
                    handle:N
                    return:R
                    action:proc{$} {Show {N get($)}} end)
in
   {{QTk.build td(Desc)} show}
   {Wait R}
   {Show R}
end
>>>


<subsection> <TITLE>Description</TITLE>

<P>
A numberentry is a widget that displays a one-line text string and allows that string to be edited. The string can contains only integer values between a defined range. Small arrows allow the user to modify the value of the integer with the mouse. A portion of the entry may be selected as described below. If an entry is exporting its selection (see the <<exportselection>> option), then it will observe the standard X11 protocols for handling the selection. When an entry has the input focus it displays an insertion cursor to indicate where new characters will be inserted.
</P>
<P>
Number entries are capable of displaying strings that are too long to fit entirely within the widget's window. In this case, only a portion of the string will be displayed; commands described below may be used to change the view in the window. Entries use the standard <<lrscrollbar>> mechanism. They also support scanning, as described below.
</P>
<P>
<EM>Indices</EM>
</P>
<P>
Many of the widget methods for entry take one or more indices as arguments. An index specifies a particular character of the entry, in any of the following ways:
<LIST>

<ITEM> integer : Specifies the character as a numerical index, where 0 corresponds to the first character in the string.

<ITEM> <<anchor>> : Indicates the anchor point for the selection, which is set with the select from and select adjust widget commands.

<ITEM> <<'end'>> : Indicates the character just after the last one in the entry's string. This is equivalent to specifying a numerical index equal to the length of the entry's string.

<ITEM> <<insert>> :  Indicates the character adjacent to and immediately following the insertion cursor.

<ITEM> <<'sel.first'>> : Indicates the first character in the selection. It is an error to use this form if the selection isn't in the entry window.

<ITEM> <<'self.last'>> : Indicates the character just after the last one in the selection. It is an error to use this form if the selection isn't in the entry window.

<ITEM> <<'@'#X>> : In this form, <<X>> is treated as an x-coordinate in the entry's window; the character spanning that x-coordinate is used. For example, <<'@'#0>> indicates the left-most character in the window.

</LIST>
<subsection> <title>Parameter List</title><p>

<subsubsection><title>Specific Parameters</title><p>
<ref to="chapter.widgets.numberentry.1">1</ref>
<ref to="chapter.widgets.numberentry.action">action</ref>
<ref to="chapter.widgets.numberentry.actionh">actionh</ref>
<ref to="chapter.widgets.numberentry.init">init</ref>
<ref to="chapter.widgets.numberentry.max">max</ref>
<ref to="chapter.widgets.numberentry.min">min</ref>
<ref to="chapter.widgets.numberentry.return">return</ref>
<ref to="chapter.widgets.numberentry.show">show</ref>
<ref to="chapter.widgets.numberentry.state">state</ref>
<ref to="chapter.widgets.numberentry.width">width</ref>

<subsubsection><title>Non Specific Parameters</title><p>
<ref to="chapter.widgets.numberentry.param_background">background</ref>
<ref to="chapter.widgets.numberentry.param_borderwidth">borderwidth</ref>
<ref to="chapter.widgets.numberentry.param_cursor">cursor</ref>
<ref to="chapter.widgets.numberentry.param_exportselection">exportselection</ref>
<ref to="chapter.widgets.numberentry.param_feature">feature</ref>
<ref to="chapter.widgets.numberentry.param_font">font</ref>
<ref to="chapter.widgets.numberentry.param_foreground">foreground</ref>
<ref to="chapter.widgets.numberentry.param_glue">glue</ref>
<ref to="chapter.widgets.numberentry.param_handle">handle</ref>
<ref to="chapter.widgets.numberentry.param_highlightbackground">highlightbackground</ref>
<ref to="chapter.widgets.numberentry.param_highlightcolor">highlightcolor</ref>
<ref to="chapter.widgets.numberentry.param_highlightthickness">highlightthickness</ref>
<ref to="chapter.widgets.numberentry.param_insertbackground">insertbackground</ref>
<ref to="chapter.widgets.numberentry.param_insertborderwidth">insertborderwidth</ref>
<ref to="chapter.widgets.numberentry.param_insertofftime">insertofftime</ref>
<ref to="chapter.widgets.numberentry.param_insertontime">insertontime</ref>
<ref to="chapter.widgets.numberentry.param_insertwidth">insertwidth</ref>
<ref to="chapter.widgets.numberentry.param_justify">justify</ref>
<ref to="chapter.widgets.numberentry.param_look">look</ref>
<ref to="chapter.widgets.numberentry.param_onCreation">onCreation</ref>
<ref to="chapter.widgets.numberentry.param_padx">padx</ref>
<ref to="chapter.widgets.numberentry.param_pady">pady</ref>
<ref to="chapter.widgets.numberentry.param_relief">relief</ref>
<ref to="chapter.widgets.numberentry.param_selectbackground">selectbackground</ref>
<ref to="chapter.widgets.numberentry.param_selectborderwidth">selectborderwidth</ref>
<ref to="chapter.widgets.numberentry.param_selectforeground">selectforeground</ref>
<ref to="chapter.widgets.numberentry.param_takefocus">takefocus</ref>
<ref to="chapter.widgets.numberentry.param_tooltips">tooltips</ref>

<subsection><title>Method List</title><p>

<para><title>'raise'</title><p><<'raise'(1:W)>>: If the <<W>> argument is omitted then the command raises the widget so that it is above all of its siblings in
the stacking order (it will not be obscured by any siblings and will obscure any siblings that overlap it). If
<<W>> is specified then it must be a handle to another widget that is either a sibling of this widget or the
descendant of a sibling of this widget. In this case the <<'raise'>> command will insert this widget into the stacking order
just above <<W>>; this could end up either raising
or lowering the widget.

<para><title>bind</title><p><<bind(event:E action:A args:LA append:AP)>>: Specifies an action <<LA>> to execute when the event <<E>> is triggered.
<list>
<item> Actions can be specified either as a procedure, a pair <<Port#Message>> or a pair <<Object#Method>> (see <ptr to="basics.otherevents">).
<item> Events are strings (see <ptr to="misc.events.names">).
<item> The list of arguments <<LA>> specifies supplementary information to pass to the action, like the key code of a keypress, or the mouse coordinates of a mouse button click (see <ptr to="misc.events.args">). If <<LA>> if not specified, <<nil>> is assumed.
<item> The boolean <<append>> parameter specifies if the binding overrides the previous binding for this event, or adds a supplementary action. If not specified, <<false>> is assumed.
</LIST>

<para><title>get</title><p><<get(parameter1:Variable1 ... parameterX:VariableX)>>: Obtains the value of one or more parameters. <<parameterX>> must be a valid parameter for the widget. <<VariableX>> must be free variables that will receive the current value of the parameters.

<para><title>getFocus</title><p><<getFocus(force:B)>>: if <<B>> is <<false>> (or by default):  if the application currently has the input focus on the widget's display, this command resets the input focus for the widget's display to the widget. If the application doesn't currently have the input focus on the widget's display, the widget will be remembered as the focus for its top-level; the next time the focus arrives at the top-level, it will be redirected it to the widget. If <<B>> is <<true>>: sets the focus of the widget's display to the widget, even if the application doesn't currently have the input focus for the display. This command should be used sparingly, if at all. In normal usage, an application should not claim the focus for itself; instead, it should wait for the window manager to give it the focus. <<B>> must be a boolean.

<para><title>getGrabStatus</title><p><<getGrabStatus(1:V)>>: Binds <<V>> to the atom <<none>> if there is no grab on the widget, to the atom <<local>> if there is a local grab and to <<global>> if there is a global grab. <<V>> must be a free variable.

<para><title>icursor</title><p><<icursor(I)>>: Arrange for the insertion cursor to be displayed just before the character given by <<I>>. <<I>> must be an integer.

<para><title>index</title><p><<index(A I)>>: Binds I to an integer giving index value that corresponds to <<A>>.

<para><title>lower</title><p><<lower(1:W)>>: If the <<W>> argument is omitted then the command lowers the widget so that it is below all of its siblings in
the stacking order (it will be obscured by any siblings and will not obscure any siblings that overlap it). If
<<W>> is specified then it must be a handle to another widget that is either a sibling of this widget or the
descendant of a sibling of this widget. In this case the <<lower>> command will insert this widget into the stacking order
just below <<W>>; this could end up either raising
or lowering the widget.

<para><title>releaseGrab</title><p><<releaseGrab>>: Releases the grab on the widget if there is one, otherwise does nothing.

<para><title>scan</title><p><<scan(...)>>: This command is used to implement scanning on entries. It has two forms, depending on option:
<LIST>
<ITEM> <<scan(mark X Y)>>: Records X and Y and the entry's current view; used in conjunction with later <<scan(dragto ...)>> commands. Typically this command is associated with a mouse button press in the widget and <<X>> and <<Y>> are the coordinates of the mouse. <<X>> and <<Y>> must be valid distances (see <ptr to="misc.distance">).

<ITEM> <<scan(dragto X Y)>>: This command computes the difference between its <<X>> and <<Y>> arguments (which are
        typically mouse coordinates) and the <<X>> and <<Y>> arguments to the last <<scan(mark ...)>>
        command for the widget. It then adjusts the view by 10 times the difference in
        coordinates. This command is typically associated with mouse motion events in the
        widget, to produce the effect of dragging the listbox at high speed through its
        window.

</LIST>

<para><title>set</title><p><<set(parameter1:value1 ... parameterX:valueX)>>: Changes the value of one or more parameters. <<parameterX>> must be a valid parameter for the widget. <<valueX>> must be a valid value for the parameter.

<para><title>setGrab</title><p><<setGrab(global:B)>>: Sets a grab on the widget. If <<B>> is <<true>> then the grab is global, otherwise it is local (<<B>> false by default). If a grab was already in effect for this application then it is automatically released. If there is already a grab on the widget and it has the same global/local form as the requested grab, then the command does nothing. Local grab affects only the grabbing application: events will
be reported to other applications as if the grab had never occurred. A global grab
locks out all applications on the screen, so that only the given subtree of the grabbing application will be
sensitive to pointer events (mouse button presses, mouse button releases, pointer motions, window entries, and
window exits). During global grabs the window manager will not receive pointer events either. Warning: whe a grab is set, it is define for the whole Oz process so that it will prevent the user to do input to other windows as well. Moreover a grab is still effective even if the window that contains the grabbed widgets is hidden. <<B>> must be a boolean.

<para><title>winfo</title><p><<winfo(parameter1:value1 ... parameterX:valueX)>>: This commands works like the <<get>> method, but for window-related information. For more details, see <ptr to="misc.winfo">.

<subsection><title>Detailed Parameters List</title><p>

<para id="chapter.widgets.numberentry.1"><title>1</title><p><<1:I>>: Specifies a positive integer value to display inside the widget. This parameter can be only used with the <<set()>> and <<get()>> methods.

<para id="chapter.widgets.numberentry.action"><title>action</title><p><<action:C>>: Specifies an action to execute right after the user modified the entry. <<C>> can take several different forms (see <ptr to="basics.events">).

<para id="chapter.widgets.numberentry.actionh"><title>actionh</title><p><<actionh:C>>: Similar to the <<action>> parameter where then handle of the widget is given as a parameter to the <<action>> to be executed. This parameter overrides the <<action>> parameter when present.

<para id="chapter.widgets.numberentry.init"><title>init</title><p><<init:I>>: Specifies a positive integer value to display inside the widget. This parameter can be used at creation time only.

<para id="chapter.widgets.numberentry.max"><title>max</title><p><<max:I>>: Specifies the upper bound of the range the user can select the value. <<I>> must be an integer. This option can be specified at creation time only.

<para id="chapter.widgets.numberentry.min"><title>min</title><p><<min:I>>: Specifies the lower bound of the range the user can select the value. <<I>> must be an integer that is at least zero. This option can be specified at creation time only.

<para id="chapter.widgets.numberentry.param_background"><title>background</title><p><<background:C>>: or <<bg:C>>: Specifies the normal background color to use when displaying the widget. <<C>> must be a valid color (see <ptr to="misc.color">).

<para id="chapter.widgets.numberentry.param_borderwidth"><title>borderwidth</title><p><<borderwidth:P>>: Specifies a non-negative value indicating the width of the 3-D border to draw around the outside of the widget (if such a border is
    being drawn; the <<relief>> option typically determines this). The value may also be used when drawing 3-D effects in the interior of
    the widget. <<P>> must be a valid screen distance (see  <ptr to="misc.distance">).

<para id="chapter.widgets.numberentry.param_cursor"><title>cursor</title><p><<cursor:A>>: Specifies the mouse cursor to be used for the widget. <<A>> must be a valid cursor (see  <ptr to="misc.cursor">)

<para id="chapter.widgets.numberentry.param_exportselection"><title>exportselection</title><p><<exportselection:B>>: Specifies whether or not a selection in the widget should also be the X selection. If the selection is exported, then selecting in the widget deselects the current X selection, selecting outside the widget deselects any widget selection, and the widget will respond to selection retrieval requests when it has a selection. The default is usually for widgets to export selections. <<B>> must be a boolean.

<para id="chapter.widgets.numberentry.param_feature"><title>feature</title><p><<feature:A>>: Specifies a feature name for the container object to reference the object controlling this widget. For more details, see <ptr to="basics.interaction">. <<A>> must be an atom.

<para id="chapter.widgets.numberentry.param_font"><title>font</title><p><<font:F>>: Specifies the font to use when drawing text inside the widget. This parameter can't be get at runtime, however it can be set. <<F>> must be a valid font (see  <ptr to="misc.font">)

<para id="chapter.widgets.numberentry.param_foreground"><title>foreground</title><p><<foreground:C>>: or <<fg:C>>: Specifies the normal foreground color to use when displaying the widget. <<C>> must be a valid color (see <ptr to="misc.color">)

<para id="chapter.widgets.numberentry.param_glue"><title>glue</title><p><<glue:A>>: Specifies how a widget must fit in its own available place. <<A>> must be an atom that is any combination of <<n>>, <<s>>, <<w>> and <<e>>. If a direction is specified, the corresponding border is glued to its neighbor or border of the frame if there is no neighbor. If a direction is not specified, the corresponding border if such that the widget takes just the width or height it needs to draw itself. If none of opposite directions is specified, the widget is centered. For more details, see <ptr to="basics.geometry">.

<para id="chapter.widgets.numberentry.param_handle"><title>handle</title><p><<handle:V>>: Specifies a variable to reference the object controlling this widget. This variable is bound when the window is built. For more details, see <ptr to="basics.interaction">. <<V>> must be a free variable.

<para id="chapter.widgets.numberentry.param_highlightbackground"><title>highlightbackground</title><p><<highlightbackground:C>>: Specifies the color to display in the traversal highlight region when the widget does not have the input focus.  <<C>> must be a valid color (see <ptr to="misc.color">)

<para id="chapter.widgets.numberentry.param_highlightcolor"><title>highlightcolor</title><p><<highlightcolor:C>>: Specifies the color to use for the traversal highlight rectangle that is drawn around the widget when it has the input focus. <<C>> must be a valid color (see <ptr to="misc.color">)

<para id="chapter.widgets.numberentry.param_highlightthickness"><title>highlightthickness</title><p><<highlightthickness:P>>: Specifies a non-negative value indicating the width of the highlight rectangle to draw around the outside of the widget when it has
    the input focus. If the value is zero, no focus highlight is drawn
    around the widget. <<P>> must be a valid screen distance (see  <ptr to="misc.distance">).

<para id="chapter.widgets.numberentry.param_insertbackground"><title>insertbackground</title><p><<insertbackground:C>>: Specifies the color to use as background in the area covered by the insertion cursor. This color will
    normally override either the normal background for the widget (or the selection background if the
    insertion cursor happens to fall in the selection). <<C>> must be a valid color (see <ptr to="misc.color">).

<para id="chapter.widgets.numberentry.param_insertborderwidth"><title>insertborderwidth</title><p><<insertborderwidth:P>>: Specifies a non-negative value indicating the width of the 3-D border to draw around the insertion
    cursor. <<P>> must be a valid screen distance (see  <ptr to="misc.distance">).

<para id="chapter.widgets.numberentry.param_insertofftime"><title>insertofftime</title><p><<insertofftime:I>>: Specifies a non-negative integer value indicating the number of milliseconds the insertion cursor should
    remain "off" in each blink cycle. If this option is zero then the cursor doesn't blink: it is on all the time. <<I>> must be a positive integer value.

<para id="chapter.widgets.numberentry.param_insertontime"><title>insertontime</title><p><<insertontime:I>>: Specifies a non-negative integer value indicating the number of milliseconds the insertion cursor should
    remain "on" in each blink cycle. <<I>> must be a positive integer value.

<para id="chapter.widgets.numberentry.param_insertwidth"><title>insertwidth</title><p><<insertwidth:P>>: Specifies a value indicating the total width of the insertion cursor. If a border has been specified for the insertion cursor (using the <<insertborderwidth>> option), the border will be drawn inside the width specified by the <<insertwidth>> option. <<P>> must be a valid screen distance (see  <ptr to="misc.distance">).

<para id="chapter.widgets.numberentry.param_justify"><title>justify</title><p><<justify:A>>: When there are multiple lines of text displayed in a widget, this option determines how the lines line up with each other. Must be one of these atoms: <<left>>, <<center>>, or <<right>>. <<left>> means that the lines' left edges all line up, <<center>> means that the lines' centers are aligned, and
    <<right>> means that the lines' right edges line up.

<para id="chapter.widgets.numberentry.param_look"><title>look</title><p><<look:L>>: Specifies a look to use for the widget. A look specifies default values for the parameters of widgets. This parameter can be specified at creation time only. Moreover changing a look will not change the appearance of widgets that are already displayed with that look. See <ptr to="misc.look"> for more details.

<para id="chapter.widgets.numberentry.param_onCreation"><title>onCreation</title><p><<onCreation:P>>: When a widget is created, for example by <<QTk.build>>, this parameter specifies an action to execute right after the widget has been created, but before returning from the build instruction. It is usefull if one needs the handle of the widget to initialize it in ways not permitted by its description record (for example binding the <<Enter>> or <<Leave>> mouse events).

<para id="chapter.widgets.numberentry.param_padx"><title>padx</title><p><<padx:P>>: Specifies how much horizontal external padding to leave on each side of the widget. This space is added outside the widget border. <<P>> must be a valid screen distance (see  <ptr to="misc.distance">)

<para id="chapter.widgets.numberentry.param_pady"><title>pady</title><p><<pady:P>>: Specifies how much vertical external padding to leave on each side of the widget. This space is added outside the widget border. <<P>> must be a valid screen distance (see  <ptr to="misc.distance">)

<para id="chapter.widgets.numberentry.param_relief"><title>relief</title><p><<relief:A>>: Specifies the 3-D effect desired for the widget.  Must be one of these atoms: <<raised>>, <<sunken>>, <<flat>>, <<ridge>>, <<solid>> or <<groove>>. The value
    indicates how the interior of the widget should appear relative to its exterior; for example, <<raised>> means the interior of the widget
    should appear to protrude from the screen, relative to the exterior of the widget.

<para id="chapter.widgets.numberentry.param_selectbackground"><title>selectbackground</title><p><<selectbackground:C>>: Specifies the background color to use when displaying selected items. <<C>> must be a valid color (see <ptr to="misc.color">).

<para id="chapter.widgets.numberentry.param_selectborderwidth"><title>selectborderwidth</title><p><<selectborderwidth:P>>: pecifies a non-negative value indicating the width of the 3-D border to draw around selected items. <<P>> must be a valid screen distance (see  <ptr to="misc.distance">).

<para id="chapter.widgets.numberentry.param_selectforeground"><title>selectforeground</title><p><<selectforeground:C>>: Specifies the foreground color to use when displaying selected items. <<C>> must be a valid color (see <ptr to="misc.color">).

<para id="chapter.widgets.numberentry.param_takefocus"><title>takefocus</title><p><<takefocus:B>>: Determines whether the window accepts the focus during keyboard traversal (e.g., Tab and Shift-Tab). Before setting the focus to a window, the traversal mechanims consult the value of the <<takeFocus>> option. A value of <<false>> means that the widget should be skipped entirely during keyboard traversal. <<true>> means that the widget should receive the input focus as long as it is viewable (it and all of its ancestors are mapped). <<B>> must be a boolean.

<para id="chapter.widgets.numberentry.param_tooltips"><title>tooltips</title><p><<tooltips:VS>>: Specifies a tooltip for the widget. A tooltip is a small message that appears when the mouse cursor if left still over the widget for a while. If <<VS>> is set to <<nil>>, no tooltip will appear at all. <<VS>> must be a virtual string.

<para id="chapter.widgets.numberentry.return"><title>return</title><p><<return:V>>: When the window is closed, <<V>> is bound to the contents of the number entry. <<V>> must be a free variable.

<para id="chapter.widgets.numberentry.show"><title>show</title><p><<show:VS>>: If this option is specified, then the true contents of the entry are not displayed in the window. Instead, each character in the entry's value will be displayed as the first character in the value of this option, such as <<*>>. This is useful, for example, if the entry is to be used to enter a password. If characters in the entry are selected and copied elsewhere, the information copied will be what is displayed, not the true contents of the entry. <<VS>> must be a virtual string.

<para id="chapter.widgets.numberentry.state"><title>state</title><p><<state:A>>: Specifies one of two states for the button: <<normal>> or <<disabled>>. If the entry is disabled then the value may not be changed using widget commands and no insertion cursor will be displayed, even if the input focus is in the widget. <<A>> must be one of these two atoms: <<normal>> or <<disabled>>.

<para id="chapter.widgets.numberentry.width"><title>width</title><p><<width:I>>: Specifies an integer value indicating the desired width of the entry window, in average-size characters of the widget's font. If the value is less than or equal to zero, the widget picks a size just large enough to hold its current text. <<I>> must be a valid index.


</section>
