<section ID="chapter.widgets.checkbutton">
  <TITLE>Checkbutton widget</title>
<p>
<picture.extern to="checkbutton.gif" type=gif>

<<<local
   C R
   Desc=checkbutton(text:"Checkbutton"
                    init:true
                    handle:C
                    return:R
                    action:proc{$} {Show {C get($)}} end)
in
   {{QTk.build td(Desc)} show}
   {Delay 1000}
   {C set({C get($)}==false)}
   {Wait R}
   {Show R}
end
>>>


<subsection> <TITLE>Description</TITLE>

<P>
A checkbutton is a widget that displays a textual string, bitmap or image and a square called an
indicator. If text is displayed, it must all be in a single font, but it can occupy multiple lines on the screen (if it contains newlines or if wrapping occurs because of the <<wraplength>> option) and one of the characters may optionally be underlined using the underline option. A checkbutton has all of the behavior of a simple button, including the following: it can display itself in either of three different ways, according to the state option; it can be made to appear raised, sunken, or flat; it can be made to flash; and it invokes an Oz command whenever mouse button 1 is clicked over the checkbutton.
</P>
<P>
In addition, checkbuttons can be selected. If a checkbutton is selected then the indicator is normally drawn with a selected appearance. Under Unix, the indicator is drawn with a sunken relief and a special color. Under Windows, the indicator is drawn with a check mark inside. If the checkbutton is not selected, then the indicator is drawn with a deselected appearance. Under Unix, the indicator is drawn with a raised relief and no special color. Under Windows, the indicator is drawn without a check mark inside. Configuration options may modify the way the indicator is displayed (or whether it is displayed at all). By default a checkbutton is configured to select
and deselect itself on alternate button clicks.
</P>

<subsection> <title>Parameter List</title><p>

<subsubsection><title>Specific Parameters</title><p>
<ref to="chapter.widgets.checkbutton.1">1</ref>
<ref to="chapter.widgets.checkbutton.action">action</ref>
<ref to="chapter.widgets.checkbutton.actionh">actionh</ref>
<ref to="chapter.widgets.checkbutton.height">height</ref>
<ref to="chapter.widgets.checkbutton.indicatoron">indicatoron</ref>
<ref to="chapter.widgets.checkbutton.init">init</ref>
<ref to="chapter.widgets.checkbutton.return">return</ref>
<ref to="chapter.widgets.checkbutton.selectcolor">selectcolor</ref>
<ref to="chapter.widgets.checkbutton.selectimage">selectimage</ref>
<ref to="chapter.widgets.checkbutton.state">state</ref>
<ref to="chapter.widgets.checkbutton.width">width</ref>

<subsubsection><title>Non Specific Parameters</title><p>
<ref to="chapter.widgets.checkbutton.param_activebackground">activebackground</ref>
<ref to="chapter.widgets.checkbutton.param_activeforeground">activeforeground</ref>
<ref to="chapter.widgets.checkbutton.param_anchor">anchor</ref>
<ref to="chapter.widgets.checkbutton.param_background">background</ref>
<ref to="chapter.widgets.checkbutton.param_bitmap">bitmap</ref>
<ref to="chapter.widgets.checkbutton.param_borderwidth">borderwidth</ref>
<ref to="chapter.widgets.checkbutton.param_cursor">cursor</ref>
<ref to="chapter.widgets.checkbutton.param_disabledforeground">disabledforeground</ref>
<ref to="chapter.widgets.checkbutton.param_feature">feature</ref>
<ref to="chapter.widgets.checkbutton.param_font">font</ref>
<ref to="chapter.widgets.checkbutton.param_foreground">foreground</ref>
<ref to="chapter.widgets.checkbutton.param_glue">glue</ref>
<ref to="chapter.widgets.checkbutton.param_handle">handle</ref>
<ref to="chapter.widgets.checkbutton.param_highlightbackground">highlightbackground</ref>
<ref to="chapter.widgets.checkbutton.param_highlightcolor">highlightcolor</ref>
<ref to="chapter.widgets.checkbutton.param_highlightthickness">highlightthickness</ref>
<ref to="chapter.widgets.checkbutton.param_image">image</ref>
<ref to="chapter.widgets.checkbutton.param_ipadx">ipadx</ref>
<ref to="chapter.widgets.checkbutton.param_ipady">ipady</ref>
<ref to="chapter.widgets.checkbutton.param_justify">justify</ref>
<ref to="chapter.widgets.checkbutton.param_look">look</ref>
<ref to="chapter.widgets.checkbutton.param_onCreation">onCreation</ref>
<ref to="chapter.widgets.checkbutton.param_padx">padx</ref>
<ref to="chapter.widgets.checkbutton.param_pady">pady</ref>
<ref to="chapter.widgets.checkbutton.param_relief">relief</ref>
<ref to="chapter.widgets.checkbutton.param_takefocus">takefocus</ref>
<ref to="chapter.widgets.checkbutton.param_text">text</ref>
<ref to="chapter.widgets.checkbutton.param_tooltips">tooltips</ref>
<ref to="chapter.widgets.checkbutton.param_underline">underline</ref>
<ref to="chapter.widgets.checkbutton.param_wraplength">wraplength</ref>

<subsection><title>Method List</title><p>

<para><title>'raise'</title><p><<'raise'(1:W)>>: If the <<W>> argument is omitted then the command raises the widget so that it is above all of its siblings in
the stacking order (it will not be obscured by any siblings and will obscure any siblings that overlap it). If
<<W>> is specified then it must be a handle to another widget that is either a sibling of this widget or the
descendant of a sibling of this widget. In this case the <<'raise'>> command will insert this widget into the stacking order
just above <<W>>; this could end up either raising
or lowering the widget.

<para><title>bind</title><p><<bind(event:E action:A args:LA append:AP)>>: Specifies an action <<LA>> to execute when the event <<E>> is triggered.
<list>
<item> Actions can be specified either as a procedure, a pair <<Port#Message>> or a pair <<Object#Method>> (see <ptr to="basics.otherevents">).
<item> Events are strings (see <ptr to="misc.events.names">).
<item> The list of arguments <<LA>> specifies supplementary information to pass to the action, like the key code of a keypress, or the mouse coordinates of a mouse button click (see <ptr to="misc.events.args">). If <<LA>> if not specified, <<nil>> is assumed.
<item> The boolean <<append>> parameter specifies if the binding overrides the previous binding for this event, or adds a supplementary action. If not specified, <<false>> is assumed.
</LIST>

<para><title>flash</title><p><<flash>>: Flashes the checkbutton. This is accomplished by redisplaying the checkbutton several times,
    alternating between active and normal colors. At the end of the flash the checkbutton is left in
    the same normal/active state as when the command was invoked. This command is ignored if the
    checkbutton's state is disabled.

<para><title>get</title><p><<get(parameter1:Variable1 ... parameterX:VariableX)>>: Obtains the value of one or more parameters. <<parameterX>> must be a valid parameter for the widget. <<VariableX>> must be free variables that will receive the current value of the parameters.

<para><title>getFocus</title><p><<getFocus(force:B)>>: if <<B>> is <<false>> (or by default):  if the application currently has the input focus on the widget's display, this command resets the input focus for the widget's display to the widget. If the application doesn't currently have the input focus on the widget's display, the widget will be remembered as the focus for its top-level; the next time the focus arrives at the top-level, it will be redirected it to the widget. If <<B>> is <<true>>: sets the focus of the widget's display to the widget, even if the application doesn't currently have the input focus for the display. This command should be used sparingly, if at all. In normal usage, an application should not claim the focus for itself; instead, it should wait for the window manager to give it the focus. <<B>> must be a boolean.

<para><title>getGrabStatus</title><p><<getGrabStatus(1:V)>>: Binds <<V>> to the atom <<none>> if there is no grab on the widget, to the atom <<local>> if there is a local grab and to <<global>> if there is a global grab. <<V>> must be a free variable.

<para><title>lower</title><p><<lower(1:W)>>: If the <<W>> argument is omitted then the command lowers the widget so that it is below all of its siblings in
the stacking order (it will be obscured by any siblings and will not obscure any siblings that overlap it). If
<<W>> is specified then it must be a handle to another widget that is either a sibling of this widget or the
descendant of a sibling of this widget. In this case the <<lower>> command will insert this widget into the stacking order
just below <<W>>; this could end up either raising
or lowering the widget.

<para><title>releaseGrab</title><p><<releaseGrab>>: Releases the grab on the widget if there is one, otherwise does nothing.

<para><title>set</title><p><<set(parameter1:value1 ... parameterX:valueX)>>: Changes the value of one or more parameters. <<parameterX>> must be a valid parameter for the widget. <<valueX>> must be a valid value for the parameter.

<para><title>setGrab</title><p><<setGrab(global:B)>>: Sets a grab on the widget. If <<B>> is <<true>> then the grab is global, otherwise it is local (<<B>> false by default). If a grab was already in effect for this application then it is automatically released. If there is already a grab on the widget and it has the same global/local form as the requested grab, then the command does nothing. Local grab affects only the grabbing application: events will
be reported to other applications as if the grab had never occurred. A global grab
locks out all applications on the screen, so that only the given subtree of the grabbing application will be
sensitive to pointer events (mouse button presses, mouse button releases, pointer motions, window entries, and
window exits). During global grabs the window manager will not receive pointer events either. Warning: whe a grab is set, it is define for the whole Oz process so that it will prevent the user to do input to other windows as well. Moreover a grab is still effective even if the window that contains the grabbed widgets is hidden. <<B>> must be a boolean.

<para><title>winfo</title><p><<winfo(parameter1:value1 ... parameterX:valueX)>>: This commands works like the <<get>> method, but for window-related information. For more details, see <ptr to="misc.winfo">.

<subsection><title>Detailed Parameters List</title><p>

<para id="chapter.widgets.checkbutton.1"><title>1</title><p><<1:B>>: Specifies if the checkbutton is selected or not. <<B>> must be a boolean. This parameter can be only used with the <<set()>> and <<get()>> methods.

<para id="chapter.widgets.checkbutton.action"><title>action</title><p><<action:C>>: Specifies an action to execute right after the user clicked the checkbutton. <<C>> can take several different forms (see <ptr to="basics.events">).

<para id="chapter.widgets.checkbutton.actionh"><title>actionh</title><p><<actionh:C>>: Similar to the <<action>> parameter where then handle of the widget is given as a parameter to the <<action>> to be executed. This parameter overrides the <<action>> parameter when present.

<para id="chapter.widgets.checkbutton.height"><title>height</title><p><<height:P>>: Specifies a desired height for the button. If an image or bitmap is being displayed in the button then the
    value is in screen units; for text it is in lines of text. If
    this option isn't specified, the button's desired height is computed from the size of the image or bitmap or
    text being displayed in it. <<P>> must be a valid screen distance (see  <ptr to="misc.distance">).

<para id="chapter.widgets.checkbutton.indicatoron"><title>indicatoron</title><p><<indicatoron:B>>: Specifies whether or not the indicator should be drawn. If <<false>>, the relief option is ignored and the widget's relief is always sunken if the widget is selected and raised otherwise. <<B>> must be a boolean.

<para id="chapter.widgets.checkbutton.init"><title>init</title><p><<init:B>>: Specifies if the checkbutton is selected or not. <<B>> must be a boolean. This parameter can be only used at creation time.

<para id="chapter.widgets.checkbutton.param_activebackground"><title>activebackground</title><p><<activebackground:C>>: Specifies the background color to use when drawing active elements. An element (a widget or portion of a widget) is active if the mouse cursor is positioned over the element and pressing a mouse button will cause some action to occur. For some elements on Windows and Macintosh systems, the active color will only be used while mouse button 1 is pressed over the element. <<C>> must be a valid color (see <ptr to="misc.color">)

<para id="chapter.widgets.checkbutton.param_activeforeground"><title>activeforeground</title><p><<activeforeground:C>>: Specifies the foreground color to use when drawing active elements. An element (a widget or portion of a widget) is active if the mouse cursor is positioned over the element and pressing a mouse button will cause some action to occur. For some elements on Windows and Macintosh systems, the active color will only be used while mouse button 1 is pressed over the element. C must be a valid color (see <ptr to="misc.color">)

<para id="chapter.widgets.checkbutton.param_anchor"><title>anchor</title><p><<anchor:A>>: Specifies how the information in a widget (e.g. text or a bitmap) is to be displayed in the widget. <<A>> must be one of these atoms: <<n>>, <<ne>>, <<e>>, <<se>>, <<s>>, <<sw>>, <<w>>, <<nw>>, or <<center>>. For example, <<nw>> means display the information such that its top-left corner is at the top-left corner of
    the widget.

<para id="chapter.widgets.checkbutton.param_background"><title>background</title><p><<background:C>>: or <<bg:C>>: Specifies the normal background color to use when displaying the widget. <<C>> must be a valid color (see <ptr to="misc.color">).

<para id="chapter.widgets.checkbutton.param_bitmap"><title>bitmap</title><p><<bitmap:B>>: Specifies a Tk pre-defined bitmap to display in the widget, or a file containing a bitmap description in the standard X11 or X10 format. The exact way in which the bitmap is displayed may be affected by other options such as anchor or justify. Typically, if this option is specified then it overrides other options that specify a textual value to display in the widget; the bitmap option may be reset to an empty string to re-enable a text display. In widgets that support both bitmap and image options, image will usually override bitmap. This parameter can't be get at runtime, however it can be set. <<B>> can be one of these atoms: <<error>>, <<gray75>>, <<gray50>>, <<gray25>>, <<gray12>>, <<hourglass>>, <<info>>, <<questhead>>, <<question>>, <<warning>>, or <<B>> can be a virtual string beginning by <<@>> and then containing the name of a bitmap description in the standard X11 or X10 format like <<"@x11.xbm">> for example.

<para id="chapter.widgets.checkbutton.param_borderwidth"><title>borderwidth</title><p><<borderwidth:P>>: Specifies a non-negative value indicating the width of the 3-D border to draw around the outside of the widget (if such a border is
    being drawn; the <<relief>> option typically determines this). The value may also be used when drawing 3-D effects in the interior of
    the widget. <<P>> must be a valid screen distance (see  <ptr to="misc.distance">).

<para id="chapter.widgets.checkbutton.param_cursor"><title>cursor</title><p><<cursor:A>>: Specifies the mouse cursor to be used for the widget. <<A>> must be a valid cursor (see  <ptr to="misc.cursor">)

<para id="chapter.widgets.checkbutton.param_disabledforeground"><title>disabledforeground</title><p><<disabledforeground:C>>: Specifies foreground color to use when drawing a disabled element. If the option is specified as an empty string (which is typically
    the case on monochrome displays), disabled elements are drawn with the normal foreground color but they are dimmed by drawing
    them with a stippled fill pattern. <<C>> must be a valid color (see <ptr to="misc.color">)

<para id="chapter.widgets.checkbutton.param_feature"><title>feature</title><p><<feature:A>>: Specifies a feature name for the container object to reference the object controlling this widget. For more details, see <ptr to="basics.interaction">. <<A>> must be an atom.

<para id="chapter.widgets.checkbutton.param_font"><title>font</title><p><<font:F>>: Specifies the font to use when drawing text inside the widget. This parameter can't be get at runtime, however it can be set. <<F>> must be a valid font (see  <ptr to="misc.font">)

<para id="chapter.widgets.checkbutton.param_foreground"><title>foreground</title><p><<foreground:C>>: or <<fg:C>>: Specifies the normal foreground color to use when displaying the widget. <<C>> must be a valid color (see <ptr to="misc.color">)

<para id="chapter.widgets.checkbutton.param_glue"><title>glue</title><p><<glue:A>>: Specifies how a widget must fit in its own available place. <<A>> must be an atom that is any combination of <<n>>, <<s>>, <<w>> and <<e>>. If a direction is specified, the corresponding border is glued to its neighbor or border of the frame if there is no neighbor. If a direction is not specified, the corresponding border if such that the widget takes just the width or height it needs to draw itself. If none of opposite directions is specified, the widget is centered. For more details, see <ptr to="basics.geometry">.

<para id="chapter.widgets.checkbutton.param_handle"><title>handle</title><p><<handle:V>>: Specifies a variable to reference the object controlling this widget. This variable is bound when the window is built. For more details, see <ptr to="basics.interaction">. <<V>> must be a free variable.

<para id="chapter.widgets.checkbutton.param_highlightbackground"><title>highlightbackground</title><p><<highlightbackground:C>>: Specifies the color to display in the traversal highlight region when the widget does not have the input focus.  <<C>> must be a valid color (see <ptr to="misc.color">)

<para id="chapter.widgets.checkbutton.param_highlightcolor"><title>highlightcolor</title><p><<highlightcolor:C>>: Specifies the color to use for the traversal highlight rectangle that is drawn around the widget when it has the input focus. <<C>> must be a valid color (see <ptr to="misc.color">)

<para id="chapter.widgets.checkbutton.param_highlightthickness"><title>highlightthickness</title><p><<highlightthickness:P>>: Specifies a non-negative value indicating the width of the highlight rectangle to draw around the outside of the widget when it has
    the input focus. If the value is zero, no focus highlight is drawn
    around the widget. <<P>> must be a valid screen distance (see  <ptr to="misc.distance">).

<para id="chapter.widgets.checkbutton.param_image"><title>image</title><p><<image:I>>: Specifies an image or a bitmap built by <<QTk.newImage>> to display in the widget. Typically, if the image option is specified then it overrides other options that specify a bitmap or textual value to display in the widget; the image option may be reset to an empty string to re-enable a bitmap or text display. This parameter can't be get at runtime, however it can be set. <<I>> must be a valid image or bitmap (see <ptr to="misc.image"> and see <ptr to="misc.bitmap">)

<para id="chapter.widgets.checkbutton.param_ipadx"><title>ipadx</title><p><<ipadx:P>>: Specifies a non-negative value indicating how much extra space to request for the widget in the
    X-direction. When computing how
    large a window needs to be, the widget will add this amount to the width it would normally need (as
    determined by the width of the things displayed in the widget); if the geometry manager can satisfy this
    request, the widget will end up with extra internal space to the left and/or right of what it displays inside.
    Most widgets only use this option for padding text: if they are displaying a bitmap or image, then they
    usually ignore padding options. <<P>> must be a valid screen distance (see  <ptr to="misc.distance">)

<para id="chapter.widgets.checkbutton.param_ipady"><title>ipady</title><p><<ipady:P>>: Specifies a non-negative value indicating how much extra space to request for the widget in the
    Y-direction. When computing how
    large a window needs to be, the widget will add this amount to the height it would normally need (as
    determined by the height of the things displayed in the widget); if the geometry manager can satisfy this
    request, the widget will end up with extra internal space above and/or below what it displays inside. Most
    widgets only use this option for padding text: if they are displaying a bitmap or image, then they usually
    ignore padding options.  <<P>> must be a valid screen distance (see  <ptr to="misc.distance">)

<para id="chapter.widgets.checkbutton.param_justify"><title>justify</title><p><<justify:A>>: When there are multiple lines of text displayed in a widget, this option determines how the lines line up with each other. Must be one of these atoms: <<left>>, <<center>>, or <<right>>. <<left>> means that the lines' left edges all line up, <<center>> means that the lines' centers are aligned, and
    <<right>> means that the lines' right edges line up.

<para id="chapter.widgets.checkbutton.param_look"><title>look</title><p><<look:L>>: Specifies a look to use for the widget. A look specifies default values for the parameters of widgets. This parameter can be specified at creation time only. Moreover changing a look will not change the appearance of widgets that are already displayed with that look. See <ptr to="misc.look"> for more details.

<para id="chapter.widgets.checkbutton.param_onCreation"><title>onCreation</title><p><<onCreation:P>>: When a widget is created, for example by <<QTk.build>>, this parameter specifies an action to execute right after the widget has been created, but before returning from the build instruction. It is usefull if one needs the handle of the widget to initialize it in ways not permitted by its description record (for example binding the <<Enter>> or <<Leave>> mouse events).

<para id="chapter.widgets.checkbutton.param_padx"><title>padx</title><p><<padx:P>>: Specifies how much horizontal external padding to leave on each side of the widget. This space is added outside the widget border. <<P>> must be a valid screen distance (see  <ptr to="misc.distance">)

<para id="chapter.widgets.checkbutton.param_pady"><title>pady</title><p><<pady:P>>: Specifies how much vertical external padding to leave on each side of the widget. This space is added outside the widget border. <<P>> must be a valid screen distance (see  <ptr to="misc.distance">)

<para id="chapter.widgets.checkbutton.param_relief"><title>relief</title><p><<relief:A>>: Specifies the 3-D effect desired for the widget.  Must be one of these atoms: <<raised>>, <<sunken>>, <<flat>>, <<ridge>>, <<solid>> or <<groove>>. The value
    indicates how the interior of the widget should appear relative to its exterior; for example, <<raised>> means the interior of the widget
    should appear to protrude from the screen, relative to the exterior of the widget.

<para id="chapter.widgets.checkbutton.param_takefocus"><title>takefocus</title><p><<takefocus:B>>: Determines whether the window accepts the focus during keyboard traversal (e.g., Tab and Shift-Tab). Before setting the focus to a window, the traversal mechanims consult the value of the <<takeFocus>> option. A value of <<false>> means that the widget should be skipped entirely during keyboard traversal. <<true>> means that the widget should receive the input focus as long as it is viewable (it and all of its ancestors are mapped). <<B>> must be a boolean.

<para id="chapter.widgets.checkbutton.param_text"><title>text</title><p><<text:VS>>: Specifies a string to be displayed inside the widget. The way in which the string is displayed depends on the particular widget and may be determined by other options, such as <<anchor>> or <<justify>>. <<VS>> must be a virtual string.

<para id="chapter.widgets.checkbutton.param_tooltips"><title>tooltips</title><p><<tooltips:VS>>: Specifies a tooltip for the widget. A tooltip is a small message that appears when the mouse cursor if left still over the widget for a while. If <<VS>> is set to <<nil>>, no tooltip will appear at all. <<VS>> must be a virtual string.

<para id="chapter.widgets.checkbutton.param_underline"><title>underline</title><p><<underline:I>>: Specifies the integer index of a character to underline in the widget. This option is used by the default bindings to implement keyboard traversal for menu buttons and menu entries. 0 corresponds to the first character of the text displayed in the widget, 1 to the next character, and so on. <<I>> must be a positive integer.

<para id="chapter.widgets.checkbutton.param_wraplength"><title>wraplength</title><p><<wraplength:P>>: For widgets that can perform word-wrapping, this option specifies the maximum line length. Lines that
    would exceed this length are wrapped onto the next line, so that no line is longer than the specified length. If this value is less than or equal to 0 then no wrapping is done: lines will break only at newline characters in the text. <<P>> must be a valid screen distance (see  <ptr to="misc.distance">)

<para id="chapter.widgets.checkbutton.return"><title>return</title><p><<return:V>>: When the window is closed, <<B>> is bound to true if the checkbutton is selected, false otherwise. <<V>> must be a free variable.

<para id="chapter.widgets.checkbutton.selectcolor"><title>selectcolor</title><p><<selectcolor:C>>: Specifies a background color to use when the button is selected. If <<indicatoron>> is <<true>> then the color applies to the indicator. Under Windows, this color is used as the background for the indicator regardless of the select state. If <<indicatoron>> is false, this color is used as the background for the entire widget, in place of <<background>> or <<activebackground>>, whenever the widget is selected. <<C>> must be a valid color (see <ptr to="misc.color">).

<para id="chapter.widgets.checkbutton.selectimage"><title>selectimage</title><p><<selectimage:I>>: Specifies an image to display (in place of the <<image>> option) when the checkbutton is selected. This option is ignored unless the <<image>> option has been specified. <<I>> must be a valid image (see <ptr to="misc.image">)

<para id="chapter.widgets.checkbutton.state"><title>state</title><p><<state:A>>: Specifies one of three states for the button: <<normal>>, <<active>>, or <<disabled>>. In normal state the button is
    displayed using the foreground and background options. The active state is typically used when the
    pointer is over the button. In active state the button is displayed using the activeforeground and
    activebackground options. Disabled state means that the button should be insensitive: the default
    bindings will refuse to activate the widget and will ignore mouse button presses. In this state the
    disabledforeground and background options determine how the button is displayed. <<A>> must be one of these three atoms: <<normal>>, <<active>>, or <<disabled>>.

<para id="chapter.widgets.checkbutton.width"><title>width</title><p><<width:P>>: Specifies a desired width for the checkbutton. If an image or bitmap is being displayed in the button then the
    value is in screen units; for text it is in characters. If
    this option isn't specified, the button's desired width is computed from the size of the image or bitmap or
    text being displayed in it. <<P>> must be a valid screen distance (see  <ptr to="misc.distance">).


</section>
